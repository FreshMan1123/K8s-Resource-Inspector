---
alwaysApply: true
---


# K8s-Resource-Inspector 项目规则

## 核心原则：先方案后实施

> **最重要规则**：任何代码修改、文件创建或结构调整，无论大小，都必须先提交方案并获得明确批准，然后再实施。

## 规则检查清单

每次操作前，必须完成以下操作：
- [ ] 已完整阅读项目规则
- [ ] 通读项目代码
- [ ] 我正在提交方案，而非直接实施.方案里可以有代码，但是这个代码不能是已经被apply到文件里待接受的状态。
- [ ] 我已明确标注"这是方案提议，请批准后我再实施"

## 详细规则

### 1. 任务处理流程
1. **方案提交**：提供详细方案，包括修改内容、影响范围
2. **等待批准**：明确等待用户批准
3. **实施方案**：获得批准后，严格按照批准的方案实施
4. **完成通知**：实施完成后，明确告知"任务已完成"

### 2. 文档编辑规则
- **保留原有内容**：编辑文档时，不删除原有内容，只做补充和调整
- **明确标注变更**：清晰说明哪些是新增内容，哪些是调整内容

### 3. 代码修改规则
- **严格遵守范围**：只修改指定文件和功能
- **发现问题提建议**：发现其他问题时，提出建议而非直接修改

### 4. 交互规范
- **使用中文**：所有交互、注释使用中文
- **明确当前状态**：每次交互开始时，说明当前是"方案提议阶段"还是"实施阶段"
- **不自行扩展任务**：完成一项任务后等待新指示，不自动开始下一项
- **编译运行由用户执行**：AI不直接执行编译和运行操作，而是提供完整的命令供用户执行，包括：
  - 编译命令：`cd code && go build -o inspector.exe ./cmd/inspector/`
  - 运行命令：`cd code && ./inspector.exe [具体参数]`
  - 其他必要的环境设置或依赖安装命令

### 5. 测试规范
- **提供测试方案**：每个功能模块的方案中必须包含测试计划
- **编写单元测试**：为核心功能编写单元测试，确保代码质量
- **测试用例设计**：测试用例应包含正常情况、边界情况和异常情况
- **明确预期结果**：每个测试用例都应有明确的预期结果
- **测试命令说明**：提供完整的测试执行命令，如：
  - 单元测试：`cd code && go test ./internal/...`
  - 特定模块测试：`cd code && go test ./internal/模块名/...`

### 6. 最佳实践评估
- **方案评估**：在提交方案时，评估方案是否符合Go语言和Kubernetes开发的最佳实践
- **代码质量检查**：评估代码的可读性、可维护性、性能和安全性
- **架构合理性**：评估修改是否符合项目的整体架构设计
- **依赖管理**：评估新增依赖的必要性和兼容性
- **错误处理**：确保代码中有完善的错误处理机制
- **日志记录**：确保关键操作有适当的日志记录

## 违规后果

如违反以上规则，特别是"先方案后实施"原则，将：
1. 立即停止当前操作
2. 明确承认违规行为
3. 重新按正确流程执行


# K8s-Resource-Inspector 项目规则

## 核心原则：先方案后实施

> **最重要规则**：任何代码修改、文件创建或结构调整，无论大小，都必须先提交方案并获得明确批准，然后再实施。

## 规则检查清单

每次操作前，必须完成以下操作：
- [ ] 已完整阅读项目规则
- [ ] 通读项目代码
- [ ] 我正在提交方案，而非直接实施.方案里可以有代码，但是这个代码不能是已经被apply到文件里待接受的状态。
- [ ] 我已明确标注"这是方案提议，请批准后我再实施"

## 详细规则

### 1. 任务处理流程
1. **方案提交**：提供详细方案，包括修改内容、影响范围
2. **等待批准**：明确等待用户批准
3. **实施方案**：获得批准后，严格按照批准的方案实施
4. **完成通知**：实施完成后，明确告知"任务已完成"

### 2. 文档编辑规则
- **保留原有内容**：编辑文档时，不删除原有内容，只做补充和调整
- **明确标注变更**：清晰说明哪些是新增内容，哪些是调整内容

### 3. 代码修改规则
- **严格遵守范围**：只修改指定文件和功能
- **发现问题提建议**：发现其他问题时，提出建议而非直接修改

### 4. 交互规范
- **使用中文**：所有交互、注释使用中文
- **明确当前状态**：每次交互开始时，说明当前是"方案提议阶段"还是"实施阶段"
- **不自行扩展任务**：完成一项任务后等待新指示，不自动开始下一项
- **编译运行由用户执行**：AI不直接执行编译和运行操作，而是提供完整的命令供用户执行，包括：
  - 编译命令：`cd code && go build -o inspector.exe ./cmd/inspector/`
  - 运行命令：`cd code && ./inspector.exe [具体参数]`
  - 其他必要的环境设置或依赖安装命令

### 5. 测试规范
- **提供测试方案**：每个功能模块的方案中必须包含测试计划
- **编写单元测试**：为核心功能编写单元测试，确保代码质量
- **测试用例设计**：测试用例应包含正常情况、边界情况和异常情况
- **明确预期结果**：每个测试用例都应有明确的预期结果
- **测试命令说明**：提供完整的测试执行命令，如：
  - 单元测试：`cd code && go test ./internal/...`
  - 特定模块测试：`cd code && go test ./internal/模块名/...`

### 6. 最佳实践评估
- **方案评估**：在提交方案时，评估方案是否符合Go语言和Kubernetes开发的最佳实践
- **代码质量检查**：评估代码的可读性、可维护性、性能和安全性
- **架构合理性**：评估修改是否符合项目的整体架构设计
- **依赖管理**：评估新增依赖的必要性和兼容性
- **错误处理**：确保代码中有完善的错误处理机制
- **日志记录**：确保关键操作有适当的日志记录

## 违规后果

如违反以上规则，特别是"先方案后实施"原则，将：
1. 立即停止当前操作
2. 明确承认违规行为
3. 重新按正确流程执行

