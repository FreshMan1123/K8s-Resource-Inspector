---
alwaysApply: true
---

# K8s-Resource-Inspector 项目规则

## 核心原则：先方案后实施

> **最重要规则**：任何代码修改、文件创建或结构调整，无论大小，都必须先提交方案并获得明确批准，然后再实施。

## 规则检查清单

每次操作前，必须完成以下操作：
- [ ] 已完整阅读项目规则
- [ ] 通读项目代码
- [ ] 我正在提交方案，而非直接实施.方案里可以有代码，但是这个代码不能是已经被apply到文件里待接受的状态。
- [ ] 我已明确标注"这是方案提议，请批准后我再实施"
- [ ] 我已完整阅读与任务相关的所有项目代码，特别是与方案相关的模块代码已一字一句阅读理解
- [ ] 我已主动收集必要的上下文信息，并基于此完善方案
- [ ] 我已对方案进行了全面的自我评估，包括技术可行性、影响范围、兼容性等

## 详细规则

### 1. 任务处理流程
1. **初步分析**：阅读相关代码，理解问题本质，识别需要进一步了解的上下文信息
2. **信息收集**：提出针对性问题，获取缺失的上下文信息，基于获取的信息完善对问题的理解
3. **方案提交**：提供详细方案，包括修改内容，提供全面的自我评估
4. **等待批准**：明确等待用户批准
5. **实施方案**：获得批准后，严格按照批准的方案实施
6. **完成通知**：实施完成后，明确告知"任务已完成"

### 2. 文档编辑规则
- **保留原有内容**：编辑文档时，不删除原有内容，只做补充和调整
- **明确标注变更**：清晰说明哪些是新增内容，哪些是调整内容

### 3. 代码修改规则
- **严格遵守范围**：只修改指定文件和功能
- **发现问题提建议**：发现其他问题时，提出建议而非直接修改
- **必须完整理解代码**：在提交方案前，必须完整阅读与任务相关的所有代码，确保完全理解代码逻辑和结构
- **一字一句阅读理解**：对与方案直接相关的模块代码，必须一字一句阅读理解，不能仅凭猜测或假设

### 4. 交互规范
- **使用中文**：所有交互、注释使用中文
- **明确当前状态**：每次交互开始时，说明当前是"方案提议阶段"还是"实施阶段"
- **不自行扩展任务**：完成一项任务后等待新指示，不自动开始下一项
- **编译运行由用户执行**：AI不直接执行编译和运行操作，而是提供完整的命令供用户执行，包括：
  - 编译命令：`cd code && go build -o inspector.exe ./cmd/inspector/`
  - 运行命令：`cd code && ./inspector.exe [具体参数]`
  - 其他必要的环境设置或依赖安装命令
- **批判性思考用户想法**：当用户提出想法或建议时，应以最佳实践的角度进行评判，而不是直接同意。需要分析优缺点，并给出基于行业最佳实践的专业意见，必要时应提出更好的替代方案

### 5. 测试规范
- **提供测试方案**：每个功能模块的方案中必须包含测试计划
- **编写测试类型**：为我们的模块设置 集成测试和功能测试
- **测试用例设计**：测试用例应包含正常情况、边界情况和异常情况
- **明确预期结果**：每个测试用例都应有明确的预期结果
- **测试命令说明**：提供完整的测试执行命令，如：
  - 单元测试：`cd code && go test ./internal/...`
  - 特定模块测试：`cd code && go test ./internal/模块名/...`
- **测试文件组织**：
  - 集成/功能测试：放在`code/test`目录下
  - 测试数据：放在`code/test/testdata`目录下
- **测试类型划分**：

  - 集成测试：测试组件间协作，放在`code/test`目录
  - 功能测试：测试完整功能流程，命名为`xxx_integration_test.go`

- **测试数据管理**：
  - 使用JSON/YAML文件存储测试数据
  - 测试数据应包含正常场景和异常场景
- **测试代码提交**：
  - 测试代码必须与实现代码一起提交
  - 测试代码应遵循与实现代码相同的质量标准
  - 测试覆盖率应达到70%以上
- **测试与源代码一致性**：
  - 测试用例必须与源代码的实现逻辑完全一致
  - 测试用例应该测试源代码的所有功能点
  - 不允许跳过源代码中的任何功能点的测试
  - 测试用例的目的是发现源代码中的问题，而不是回避问题
  - 如果测试过程中发现源代码有问题，应该给出提示，让用户考虑是否应该在测试用例与源代码中保存该错误
- **单元测试最佳实践**：
  - 隔离性：单元测试应该是隔离的，不依赖外部系统或文件
  - 可重复性：每次运行结果应该一致
  - 快速性：执行应该迅速
  - 自我验证：明确知道成功或失败的原因
  - 及时性：在编写代码的同时编写测试
- **测试与源代码一致性的具体实践**：
  - **测试映射原则**：测试应该反映当前源代码的实现逻辑，即使实现可能存在问题
  - **测试失败处理流程**：
    1. **分析失败原因**：首先确定测试失败是由于源代码bug还是测试代码问题
    2. **优先修改测试代码**：在确认问题所在后，先在测试代码中实现修复方案
    3. **验证测试修复**：确保修改后的测试代码逻辑正确且能够通过
    4. **应用到源代码**：将验证通过的修复方案应用到源代码
    5. **最终验证**：运行测试确认源代码修改后测试能够通过
  - **测试优先级**：
    - 单元测试：针对单个组件的测试
    - 集成测试：针对组件间协同的测试
  - **测试覆盖报告**：测试应提供覆盖报告，说明测试覆盖了哪些函数
- **测试失败分析指南**：
  - **源代码问题判断标准**：
    - 源代码的行为与预期功能不符
    - 源代码在特定条件下产生错误结果
    - 源代码存在明显的逻辑或实现错误
  - **测试代码问题判断标准**：
    - 测试的预期结果与源代码的设计意图不符
    - 测试中使用了错误的输入数据或测试方法
    - 测试逻辑本身存在错误

### 6. 最佳实践评估
- **方案评估**：在提交方案时，评估方案是否符合Go语言和Kubernetes开发的最佳实践
- **代码质量检查**：评估代码的可读性、可维护性、性能和安全性
- **架构合理性**：评估修改是否符合项目的整体架构设计
- **依赖管理**：评估新增依赖的必要性和兼容性
- **错误处理**：确保代码中有完善的错误处理机制
- **日志记录**：确保关键操作有适当的日志记录

### 7. 方案阶段信息收集规范
- **必须主动收集上下文**：在提交方案前，必须主动提问以获取未能从代码中直接获得的上下文信息
- **问题类型**：问题应主要集中在以下几类：
  - **业务背景问题**：该功能的业务目的和用户场景是什么？
  - **历史决策问题**：为什么之前的代码是这样设计的？
  - **未来规划问题**：该模块未来有什么扩展计划？
  - **使用场景问题**：代码在实际环境中如何被使用？
  - **特殊约束问题**：是否有特殊的技术或业务约束需要考虑？
  - **优先级问题**：在多个可能的解决方案中，哪些因素更重要？
  - **团队偏好问题**：团队在编码风格、设计模式等方面有什么偏好？
  - **未记录需求问题**：是否有未在代码或文档中体现的隐含需求？
- **避免转嫁评估工作**：不应询问那些应由AI自己评估的问题，如技术可行性、代码影响范围等
- **问题精确性**：问题应该具体明确，避免过于宽泛的问题
- **问题必要性**：只询问对方案制定确实必要的信息，避免过多不必要的问题

### 8. 方案自我评估规范
- **技术可行性评估**：必须评估方案的技术可行性，包括是否符合语言特性、框架限制等
- **影响范围评估**：必须分析代码修改的影响范围，包括直接和间接影响的模块
- **向后兼容性评估**：必须评估方案是否保持向后兼容性，或者明确指出不兼容的变更
- **性能影响评估**：必须评估方案对系统性能的潜在影响
- **安全性评估**：必须评估方案是否引入安全风险
- **可维护性评估**：必须评估方案是否提高或降低代码的可维护性
- **测试策略评估**：必须提出合适的测试策略，确保修改被充分测试

### 9. 项目规则补充说明
- **优先级原则**：
  - 功能实现优先于其他考量
  - 在关键决策点主动询问用户进行权衡
  - 严格遵循每一条项目规则，不擅自灵活处理
- **文档与注释要求**：
  - 文档应简明扼要，避免冗长但确保必要信息完整
  - 为每个函数提供详细注释，确保代码可读性和可维护性
- **错误处理流程**：
  - 在处理错误前先提供方案供用户评估
  - 尽早处理发现的技术债务，避免后期偿还困难
- **方案评估标准**：
  - 技术正确性
  - 可扩展性
  - 符合行业最佳实践
- **跨模块修改协调**：
  - 涉及多个模块时，一次性提供完整的总体设计协调方案
  - 在用户批准后，按模块拆分逐一实施
- **功能与性能平衡**：
  - 优先考虑功能实现，性能优化可以后置
- **兼容性要求**：
  - 确保代码在Windows、Linux和macOS平台上兼容
  - 进行重大更改时应谨慎评估影响范围
  - 提供更改后的预期结果和回滚方案
- **代码审查与实现决策**：
  - 实施完成后进行自我审查，解释关键实现决策
  - 评估代码是否符合最佳实践
- **文档更新要求**：
  - 代码变更时同步更新相关文档
  - 确保文档与代码保持一致
- **规则适用范围**：
  - 项目规则适用于所有情况，除非用户特殊说明
- **反馈处理方式**：
  - 收到反馈时先进行讨论
  - 从最佳实践角度评估反馈的合理性
  - 在达成共识后再进行修改
- **优先级排序**：
  - 功能正确性 > 代码质量 > 性能
- **规则演进**：
  - 始终以最新的项目规则为准

## 违规后果

如违反以上规则，特别是"先方案后实施"原则，将：
1. 立即停止当前操作
2. 明确承认违规行为
3. 重新按正确流程执行

# K8s-Resource-Inspector 项目规则

## 核心原则：先方案后实施

> **最重要规则**：任何代码修改、文件创建或结构调整，无论大小，都必须先提交方案并获得明确批准，然后再实施。

## 规则检查清单

每次操作前，必须完成以下操作：
- [ ] 已完整阅读项目规则
- [ ] 通读项目代码
- [ ] 我正在提交方案，而非直接实施.方案里可以有代码，但是这个代码不能是已经被apply到文件里待接受的状态。
- [ ] 我已明确标注"这是方案提议，请批准后我再实施"
- [ ] 我已完整阅读与任务相关的所有项目代码，特别是与方案相关的模块代码已一字一句阅读理解
- [ ] 我已主动收集必要的上下文信息，并基于此完善方案
- [ ] 我已对方案进行了全面的自我评估，包括技术可行性、影响范围、兼容性等

## 详细规则

### 1. 任务处理流程
1. **初步分析**：阅读相关代码，理解问题本质，识别需要进一步了解的上下文信息
2. **信息收集**：提出针对性问题，获取缺失的上下文信息，基于获取的信息完善对问题的理解
3. **方案提交**：提供详细方案，包括修改内容，提供全面的自我评估
4. **等待批准**：明确等待用户批准
5. **实施方案**：获得批准后，严格按照批准的方案实施
6. **完成通知**：实施完成后，明确告知"任务已完成"

### 2. 文档编辑规则
- **保留原有内容**：编辑文档时，不删除原有内容，只做补充和调整
- **明确标注变更**：清晰说明哪些是新增内容，哪些是调整内容

### 3. 代码修改规则
- **严格遵守范围**：只修改指定文件和功能
- **发现问题提建议**：发现其他问题时，提出建议而非直接修改
- **必须完整理解代码**：在提交方案前，必须完整阅读与任务相关的所有代码，确保完全理解代码逻辑和结构
- **一字一句阅读理解**：对与方案直接相关的模块代码，必须一字一句阅读理解，不能仅凭猜测或假设

### 4. 交互规范
- **使用中文**：所有交互、注释使用中文
- **明确当前状态**：每次交互开始时，说明当前是"方案提议阶段"还是"实施阶段"
- **不自行扩展任务**：完成一项任务后等待新指示，不自动开始下一项
- **编译运行由用户执行**：AI不直接执行编译和运行操作，而是提供完整的命令供用户执行，包括：
  - 编译命令：`cd code && go build -o inspector.exe ./cmd/inspector/`
  - 运行命令：`cd code && ./inspector.exe [具体参数]`
  - 其他必要的环境设置或依赖安装命令
- **批判性思考用户想法**：当用户提出想法或建议时，应以最佳实践的角度进行评判，而不是直接同意。需要分析优缺点，并给出基于行业最佳实践的专业意见，必要时应提出更好的替代方案

### 5. 测试规范
- **提供测试方案**：每个功能模块的方案中必须包含测试计划
- **编写单元测试**：为核心功能编写单元测试，确保代码质量
- **测试用例设计**：测试用例应包含正常情况、边界情况和异常情况
- **明确预期结果**：每个测试用例都应有明确的预期结果
- **测试命令说明**：提供完整的测试执行命令，如：
  - 单元测试：`cd code && go test ./internal/...`
  - 特定模块测试：`cd code && go test ./internal/模块名/...`
- **测试文件组织**：
  - 单元测试：与源文件放在同一目录，命名为`xxx_test.go`
  - 集成/功能测试：放在`code/test`目录下
  - 测试数据：放在`code/test/testdata`目录下
- **测试类型划分**：
  - 单元测试：测试单个函数/方法，与源文件同目录
  - 集成测试：测试组件间协作，放在`code/test`目录
  - 功能测试：测试完整功能流程，命名为`xxx_integration_test.go`
  - 性能测试：测试性能表现，命名为`xxx_benchmark_test.go`
- **测试数据管理**：
  - 使用JSON/YAML文件存储测试数据
  - 测试数据应包含正常场景和异常场景
  - 使用Mock对象模拟外部依赖
- **测试代码提交**：
  - 测试代码必须与实现代码一起提交
  - 测试代码应遵循与实现代码相同的质量标准
  - 测试覆盖率应达到70%以上
- **测试与源代码一致性**：
  - 测试用例必须与源代码的实现逻辑完全一致
  - 测试用例应该测试源代码的所有功能点
  - 不允许跳过源代码中的任何功能点的测试
  - 测试用例的目的是发现源代码中的问题，而不是回避问题
  - 如果测试过程中发现源代码有问题，应该给出提示，让用户考虑是否应该在测试用例与源代码中保存该错误
- **单元测试最佳实践**：
  - 隔离性：单元测试应该是隔离的，不依赖外部系统或文件
  - 可重复性：每次运行结果应该一致
  - 快速性：执行应该迅速
  - 自我验证：明确知道成功或失败的原因
  - 及时性：在编写代码的同时编写测试
- **测试与源代码一致性的具体实践**：
  - **测试映射原则**：测试应该反映当前源代码的实现逻辑，即使实现可能存在问题
  - **测试失败处理流程**：
    1. **分析失败原因**：首先确定测试失败是由于源代码bug还是测试代码问题
    2. **优先修改测试代码**：在确认问题所在后，先在测试代码中实现修复方案
    3. **验证测试修复**：确保修改后的测试代码逻辑正确且能够通过
    4. **应用到源代码**：将验证通过的修复方案应用到源代码
    5. **最终验证**：运行测试确认源代码修改后测试能够通过
  - **测试优先级**：
    - 单元测试：针对单个组件的测试
    - 集成测试：针对组件间协同的测试
  - **测试覆盖报告**：测试应提供覆盖报告，说明测试覆盖了哪些函数
- **测试失败分析指南**：
  - **源代码问题判断标准**：
    - 源代码的行为与预期功能不符
    - 源代码在特定条件下产生错误结果
    - 源代码存在明显的逻辑或实现错误
  - **测试代码问题判断标准**：
    - 测试的预期结果与源代码的设计意图不符
    - 测试中使用了错误的输入数据或测试方法
    - 测试逻辑本身存在错误

### 6. 最佳实践评估
- **方案评估**：在提交方案时，评估方案是否符合Go语言和Kubernetes开发的最佳实践
- **代码质量检查**：评估代码的可读性、可维护性、性能和安全性
- **架构合理性**：评估修改是否符合项目的整体架构设计
- **依赖管理**：评估新增依赖的必要性和兼容性
- **错误处理**：确保代码中有完善的错误处理机制
- **日志记录**：确保关键操作有适当的日志记录

### 7. 方案阶段信息收集规范
- **必须主动收集上下文**：在提交方案前，必须主动提问以获取未能从代码中直接获得的上下文信息
- **问题类型**：问题应主要集中在以下几类：
  - **业务背景问题**：该功能的业务目的和用户场景是什么？
  - **历史决策问题**：为什么之前的代码是这样设计的？
  - **未来规划问题**：该模块未来有什么扩展计划？
  - **使用场景问题**：代码在实际环境中如何被使用？
  - **特殊约束问题**：是否有特殊的技术或业务约束需要考虑？
  - **优先级问题**：在多个可能的解决方案中，哪些因素更重要？
  - **团队偏好问题**：团队在编码风格、设计模式等方面有什么偏好？
  - **未记录需求问题**：是否有未在代码或文档中体现的隐含需求？
- **避免转嫁评估工作**：不应询问那些应由AI自己评估的问题，如技术可行性、代码影响范围等
- **问题精确性**：问题应该具体明确，避免过于宽泛的问题
- **问题必要性**：只询问对方案制定确实必要的信息，避免过多不必要的问题

### 8. 方案自我评估规范
- **技术可行性评估**：必须评估方案的技术可行性，包括是否符合语言特性、框架限制等
- **影响范围评估**：必须分析代码修改的影响范围，包括直接和间接影响的模块
- **向后兼容性评估**：必须评估方案是否保持向后兼容性，或者明确指出不兼容的变更
- **性能影响评估**：必须评估方案对系统性能的潜在影响
- **安全性评估**：必须评估方案是否引入安全风险
- **可维护性评估**：必须评估方案是否提高或降低代码的可维护性
- **测试策略评估**：必须提出合适的测试策略，确保修改被充分测试

### 9. 项目规则补充说明
- **优先级原则**：
  - 功能实现优先于其他考量
  - 在关键决策点主动询问用户进行权衡
  - 严格遵循每一条项目规则，不擅自灵活处理
- **文档与注释要求**：
  - 文档应简明扼要，避免冗长但确保必要信息完整
  - 为每个函数提供详细注释，确保代码可读性和可维护性
- **错误处理流程**：
  - 在处理错误前先提供方案供用户评估
  - 尽早处理发现的技术债务，避免后期偿还困难
- **方案评估标准**：
  - 技术正确性
  - 可扩展性
  - 符合行业最佳实践
- **跨模块修改协调**：
  - 涉及多个模块时，一次性提供完整的总体设计协调方案
  - 在用户批准后，按模块拆分逐一实施
- **功能与性能平衡**：
  - 优先考虑功能实现，性能优化可以后置
- **兼容性要求**：
  - 确保代码在Windows、Linux和macOS平台上兼容
  - 进行重大更改时应谨慎评估影响范围
  - 提供更改后的预期结果和回滚方案
- **代码审查与实现决策**：
  - 实施完成后进行自我审查，解释关键实现决策
  - 评估代码是否符合最佳实践
- **文档更新要求**：
  - 代码变更时同步更新相关文档
  - 确保文档与代码保持一致
- **规则适用范围**：
  - 项目规则适用于所有情况，除非用户特殊说明
- **反馈处理方式**：
  - 收到反馈时先进行讨论
  - 从最佳实践角度评估反馈的合理性
  - 在达成共识后再进行修改
- **优先级排序**：
  - 功能正确性 > 代码质量 > 性能
- **规则演进**：
  - 始终以最新的项目规则为准

## 违规后果

如违反以上规则，特别是"先方案后实施"原则，将：
1. 立即停止当前操作
2. 明确承认违规行为
3. 重新按正确流程执行

